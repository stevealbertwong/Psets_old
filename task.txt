INTRO
cs103 4 weeks
cs41 2 weeks
cs106a 2 weeks
cs106b 3 weeks
cs106l 2 weeks
cs106x 2 weeks
cs108 3 weeks
cs109 4 weeks

SYSTEM:
cs1u 1 week
cs107 4 weeks 
cs110 4 weeks 
cs140 6 weeks 
cs240 4 weeks
cs144 4 week
cs244 4 weeks
cs155 4 weeks

DATA STRUCTURE
cs161 4 weeks
cs261 4 weeks
cs166 4 weeks
cs168 4 weeks
cs167 4 weeks
cs267 4 weeks

MACHINE LEARNING
cs228 4 weeks
cs221 4 weeks
Math51 4 weeks
cs229 4 weeks
cs231n 4 weeks
cs224d 3 weeks
cs224u 3 weeks
cs224n 3 weeks
Convex Optimization 5 weeks

MOBILE AND WEB
cs193p 4 weeks
cs193a 3 weeks
cs142 3 weeks

OTHERS
cs124
cs246 4 weeks
cs224w
21 months


Agile Development: 
-1 hour work = 1 pt

5-28: 
Read up assign7 -> 4 pts
Read up CMU malloclab ->2 pts

5-29:
mycodeschool pointer arithmetic, type casting, void pointer -> 2 pts
Learn C pointers and struct and data structure -> 2 pts
mycodeschool malloc, realloc, calloc, free() -> 3 pts

5-30:
finish up malloc recitiation ->3 pts
starting reading on 110 mapreduce -> 1pt

5-31:
reading 110 mapreduce-server.cc -> 3 pts
MapReduceServer Class 
unsigned long extractPortNumber(const char* portArgument)
void initializeFromConfigFile(const std::string& configFilename)
void applyToServer(const std::string& key, const std::string& value)
std::string ensureDirectoryExists(const std::string& key, const std::string& path)

6-1:
110 mapreduce-server.cc
buildIPAddressMap ->1pt

6-2:
106b LinkedList::add, get, insert - 3pts

6-3:
15-213 Virtual Memory6-3:

6-4: 
106b BinaryTree::print, contains - 2pts
110 int createServerSocket(unsigned short port, in backlog) - 1pt

6-5:
learn c ex18 function pointer as callback -1pt
typedef int (*compare_callback)(int a, int b);
int* bubble_sort(int a, int b, compare_callback c){
	if c(a, b)>0{
	do something..}
};
 
106b file/io ifstream getline(input, file), open(), close()- 1pt

6-6:
makefile, files settings dependencies, libraries -2pts
command make reads in the file Makefile from current directory
make reassemble, make myprogram, make clean -> build specific target 
gcc main.cc function1.cc function2.cc -o hello

109 - pset5 titanic + estimating parameter -3pts
import csv
open("titanic.csv") as csvfile
readCSV= csv.reader(csvfile, delimiter=",")
for row in readCSV // go through each row
	if (row[3] == "w" && row[1] == "1") // go through each item in the row to get woman in first class
		women1stClass++
		if  (row[0] == 1)
			survived ++
p = survived / women1stClass

6-7
109 parameter estimation, method of moments applied on poisson, bernoulli, normal, uniform distribution - 2pts
106b FirstProgram.cpp HamDaDaDa.cpp -3pts 
using namespace std = std::cout 
C++ - #include<iostream>, no public private static shit in c++
java - printl("Hello" + "world); #import, public static int main();
c++ - std::cout<< "hello" << "world" << std::endl // standard console output, pacman you are eating the output or less than less than, <<endl if not written then cursor just stay in the same line  
c - printf
getline();
int main() return 0 -> C++ the int goes out to operating system whether program has executed or not, in java main is void 
parametr sends information into method

wget download all index on apache website-> 1pt

6-8
Matrix review - reduce echelon form, LU factorization, linearly dependent, inverse, diagonal, upper triangular, gaussian elimination, homogeneous system with trivial solution, generic system, augmented matrix, rank of matrix, gauss-jordan elimination - 1pt

Google Developer tool https://www.youtube.com/watch?v=G74ll-6L4_o - 3pts
element, networking, resources, console
JS DataStructure and Algo - 1pt
143 coursera -1pt

6-9
VM setup but no login in page, repair file system error- 1pt
CSE 351 data lab - 1pt
351 lab0 -1pt
351 hardware organization, electronic implementation of bits, one memory address correspond to each byte of memory,8 bytes are going ot group tgt to represent 64 bit addressfor x86 machine, address is the first byte of grouped address, 64bits represents word size of the machine/integer size, so we could have 8 gbs different addresses,  
little vs big endian to order the byte within a word, IA32 vs x86
big -> most significant byte has lower address i.e. highest order digit 1 in 0x123456 has lowest address
little -> least significant byte has lower address x86-> little endian 
pointer is a data object that contains an address that you intepret as an address 
boolean in theory is 1 bit but in pratice we address data in 1 byte 

Array represents adjacent locations in memory storing same type of data object

6-10
CSE 351 - showbytes.c print address of pointer + hex representation of the value -1pt
351 - Boolean algebra + bit level manipulating + bitwise operations
DeMorgan's law ~(A|B) = ~A&~B intuition -> flip A/B flip to opposite i.e. ~A -> complement of A , | means 1+0 = 1, & means 1+0 =0 so we flip this rule as well
Bit-level operation
Logic operation -1pt
lab2 -1pt
x86 assembly -1pt


6-11
351 assembly movl %eax, (%edx) -2pts
351 buffer overflow lab3 -3 pts


6-12
351 stack and registers of void swap(int* x, int* y), moving data between registers and memory, 1st addressing mode: movl 12(%ebp), %eax i.e. traversing the offset on the memory side to get the value vs 2nd addressing mode: movl (%eax) %edx i.e. %eax storing the address so go from register side to address of memory side to get the value  - 2pts

Mining Massive Dataset -3pts
-distributed file system, cluster architecture: 1. chunk servers 2.master/name node 3.client library for file access 
-cluster computation challenge: node failure, network bandwidth, complexity -> solution: map-reduce
- e.g. hostname(URL), size -> find the size of paritcular hostname
- e.g. unique word, appearance times
- e.g. count number of times each 5-word sequence occur in a large corpus of documents
map: scan the document once, creates a map of key and value
group by key: sort in order
reduce: reduce/combine the duplicates/multiple occurances into unique occurance result so it can be run in a single node/rack
most examples querying a distributed file system to get a combined result

- link analysis algorithm to compute importances of a node in a graph
- e.g. page rank, hubs and authorities

Reading through quiz - 2pts
 
addressing mode e.g. leal, addl, imul, sall 4(%ecx, %eax) - 1 pt




Silicon Valley: system architecture, networking, security, getting root access to NSA servers, database rollback

Reading design decisions -> 2 pts

pointer arithmetic, type casting, malloc, realloc, free, sbrk, brk, mmap, memmove, memset-> 12 pts
open(), strdup(), typedef. 
int putchar(int c) // putc(c, stdout)
int fputc(int c, FILE* stream); // writes the character, cast unsigned char to stream
int putc(intc, FILE* stream);

 

