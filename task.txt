INTRO
cs103 4 weeks
cs41 2 weeks
cs106a 2 weeks
cs106b 3 weeks
cs106l 2 weeks
cs106x 2 weeks
cs108 3 weeks
cs109 4 weeks

SYSTEM:
cs1u 1 week
cs107 4 weeks 
cs110 4 weeks 
cs140 6 weeks 
cs240 4 weeks
cs144 4 week
cs244 4 weeks
cs155 4 weeks

DATA STRUCTURE
cs161 4 weeks
cs261 4 weeks
cs166 4 weeks
cs168 4 weeks
cs167 4 weeks
cs267 4 weeks

MACHINE LEARNING
cs228 4 weeks
cs221 4 weeks
Math51 4 weeks
cs229 4 weeks
cs231n 4 weeks
cs224d 3 weeks
cs224u 3 weeks
cs224n 3 weeks
Convex Optimization 5 weeks

MOBILE AND WEB
cs193p 4 weeks
cs193a 3 weeks
cs142 3 weeks

OTHERS
cs124
cs246 4 weeks
cs224w
21 months


Agile Development: 
-1 hour work = 1 pt

5-28: 
Read up assign7 -> 4 pts
Read up CMU malloclab ->2 pts

5-29:
mycodeschool pointer arithmetic, type casting, void pointer -> 2 pts
Learn C pointers and struct and data structure -> 2 pts
mycodeschool malloc, realloc, calloc, free() -> 3 pts

5-30:
finish up malloc recitiation ->3 pts
starting reading on 110 mapreduce -> 1pt

5-31:
reading 110 mapreduce-server.cc -> 3 pts
MapReduceServer Class 
unsigned long extractPortNumber(const char* portArgument)
void initializeFromConfigFile(const std::string& configFilename)
void applyToServer(const std::string& key, const std::string& value)
std::string ensureDirectoryExists(const std::string& key, const std::string& path)

6-1:
110 mapreduce-server.cc
buildIPAddressMap ->1pt

6-2:
106b LinkedList::add - 1pt

void LinkedList::add(int value){
while(current->next!=NULL){
	current = current->next; // walk till the end of the list
};
current->next = new ListNode(value);

int LinkedList::get(int index){
	ListNode* current = front; 	
	for (int i =0, i<index, i++){ // walk the list for (int index) steps 
		current = current->next;		
	}
	return current->data // dereference pointer to retrieve value	
};







Reading design decisions -> 2 pts

pointer arithmetic, type casting, malloc, realloc, free, sbrk, brk, mmap, memmove, memset-> 12 pts
open(), strdup(), typedef. 

 

